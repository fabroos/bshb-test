// This file was generated by basehub. Do not edit directly. Read more: https://basehub.com/docs/api-reference/basehub-sdk

/* eslint-disable */
/* eslint-disable eslint-comments/no-restricted-disable */
/* tslint:disable */

import "./chunk-F5PHAOMO.js";

// node_modules/.pnpm/basehub@7.0.3_@babel+runtime@7.24.7_@types+react@18.3.3_react-dom@19.0.0-rc-4c2e457c7c-202405_7se37b3ufix7zd7fh2zn5nnn7u/node_modules/basehub/src/react/pump/server-pump.tsx
import * as React from "react";
import {
  basehub,
  generateQueryOp,
  getStuffFromEnv
} from "../index";
var LazyClientPump = React.lazy(
  () => import("./client-pump-XG6GBN6U.js").then((mod) => ({ default: mod.ClientPump }))
);
var cache = /* @__PURE__ */ new Map();
var pumpToken = null;
var spaceID = null;
var pusherData = null;
var DEDUPE_TIME_MS = 500;
var Pump = async ({
  children,
  queries,
  ...basehubProps
}) => {
  const errors = [];
  const responseHashes = [];
  const { headers, url, draft } = getStuffFromEnv(basehubProps);
  const token = headers["x-basehub-token"];
  const apiVersion = headers["x-basehub-api-version"];
  let pumpEndpoint;
  switch (true) {
    case url.origin.includes("api.basehub.com"):
      pumpEndpoint = "https://basehub.com/api/pump";
      break;
    case url.origin.includes("api.bshb.dev"):
      pumpEndpoint = "https://basehub.dev/api/pump";
      break;
    default:
      pumpEndpoint = url.toString();
  }
  console.log("Pump Endpoint:", pumpEndpoint);
  const noQueries = queries.length === 0;
  const queriesWithFallback = draft && noQueries ? [{ _sys: { id: true } }] : queries;
  const results = await Promise.all(
    // @ts-ignore
    queriesWithFallback.map(async (singleQuery, index) => {
      const rawQueryOp = generateQueryOp(singleQuery);
      const cacheKey = JSON.stringify(rawQueryOp) + (draft ? "_draft" : "_prod");
      let data = void 0;
      if (cache.has(cacheKey)) {
        const cached = cache.get(cacheKey);
        if (Date.now() - cached.start < DEDUPE_TIME_MS) {
          data = await cached.data;
        }
      }
      if (!data) {
        const dataPromise = draft ? fetch(pumpEndpoint, {
          // @ts-expect-error - nextjs only option
          next: { revalidate: 0 },
          method: "POST",
          headers: {
            "content-type": "application/json",
            "x-basehub-token": token,
            "x-basehub-api-version": apiVersion
          },
          body: JSON.stringify(rawQueryOp)
        }).then(async (response) => {
          const {
            data: data2 = null,
            newPumpToken,
            errors: _errors = null,
            spaceID: _spaceID,
            pusherData: _pusherData,
            responseHash: _responseHash
          } = await response.json();
          pumpToken = newPumpToken;
          pusherData = _pusherData;
          spaceID = _spaceID;
          errors.push(_errors);
          responseHashes[index] = _responseHash;
          return data2;
        }) : basehub(basehubProps).query(singleQuery);
        cache.set(cacheKey, {
          start: Date.now(),
          data: dataPromise
        });
        data = await dataPromise;
      }
      return { data, rawQueryOp };
    })
  );
  let resolvedChildren;
  const childrenPromise = children(results.map((r) => r.data));
  if (childrenPromise instanceof Promise) {
    resolvedChildren = await childrenPromise?.catch((e) => {
      if (draft) {
        console.error("Error in Pump children function", e);
        return null;
      } else
        throw e;
    });
  } else {
    resolvedChildren = childrenPromise;
  }
  if (draft) {
    if (!pumpToken || !spaceID || !pusherData) {
      console.log("Results (length):", results?.length);
      console.log("Errors:", JSON.stringify(errors, null, 2));
      console.log("Pump Endpoint:", pumpEndpoint);
      console.log("Pump Token:", pumpToken);
      console.log("Space ID:", spaceID);
      console.log("Pusher Data:", pusherData);
      console.log("Response Hashes:", JSON.stringify(responseHashes, null, 2));
      throw new Error(
        "Pump did not return the necessary data. Look at the logs to see what's missing."
      );
    }
    return /* @__PURE__ */ React.createElement(
      LazyClientPump,
      {
        rawQueries: results.map((r) => r.rawQueryOp),
        initialState: {
          // @ts-ignore
          data: !noQueries ? results.map((r) => r.data ?? null) : [],
          errors,
          responseHashes,
          pusherData,
          spaceID
        },
        pumpEndpoint,
        pumpToken: pumpToken ?? void 0,
        initialResolvedChildren: resolvedChildren,
        apiVersion
      },
      children
    );
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, resolvedChildren);
};
var createPump = (queries) => {
  return (props) => {
    const queryResult = typeof queries === "function" ? queries(props.params) : queries;
    return /* @__PURE__ */ React.createElement(Pump, { ...props, queries: queryResult });
  };
};
export {
  Pump,
  createPump
};
