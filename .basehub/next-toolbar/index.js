// This file was generated by basehub. Do not edit directly. Read more: https://basehub.com/docs/api-reference/basehub-sdk

/* eslint-disable */
/* eslint-disable eslint-comments/no-restricted-disable */
/* tslint:disable */

import "./chunk-YSQDPG26.js";

// node_modules/.pnpm/basehub@7.0.3_@babel+runtime@7.24.7_@types+react@18.3.3_react-dom@19.0.0-rc-4c2e457c7c-202405_7se37b3ufix7zd7fh2zn5nnn7u/node_modules/basehub/src/next/toolbar/server-toolbar.tsx
import * as React from "react";
import { draftMode } from "next/headers";
import {
  getStuffFromEnv
} from "../index";
var LazyClientConditionalRenderer = React.lazy(
  () => import("./client-conditional-renderer-56LL6WL7.js").then((mod) => ({
    default: mod.ClientConditionalRenderer
  }))
);
var ServerToolbar = ({ ...basehubProps }) => {
  const { isForcedDraft } = getStuffFromEnv(basehubProps);
  const enableDraftMode = async (bshbPreviewToken) => {
    "use server";
    const { headers, url } = getStuffFromEnv(basehubProps);
    const token = headers["x-basehub-token"];
    let enablePreviewEndpoint;
    switch (true) {
      case url.origin.includes("api.basehub.com"):
        enablePreviewEndpoint = "https://basehub.com/api/preview/auth";
        break;
      case url.origin.includes("api.bshb.dev"):
        enablePreviewEndpoint = "https://basehub.dev/api/preview/auth";
        break;
      default:
        enablePreviewEndpoint = url.toString();
    }
    return fetch(enablePreviewEndpoint, {
      // @ts-expect-error - nextjs only option
      next: { revalidate: 0 },
      method: "POST",
      headers: {
        "content-type": "application/json",
        "x-basehub-token": token
      },
      body: JSON.stringify({ bshbPreview: bshbPreviewToken })
    }).then(async (res) => {
      try {
        const responseIsJson = res.headers.get("content-type")?.includes("json");
        if (!responseIsJson) {
          return { status: 400, response: { error: "Bad request" } };
        }
        const response = await res.json();
        if (res.status === 200)
          draftMode().enable();
        return { status: res.status, response };
      } catch (error) {
        return { status: 500, response: { error: "Something went wrong" } };
      }
    });
  };
  const disableDraftMode = async () => {
    "use server";
    draftMode().disable();
  };
  return /* @__PURE__ */ React.createElement(
    LazyClientConditionalRenderer,
    {
      draft: draftMode().isEnabled,
      isForcedDraft,
      enableDraftMode,
      disableDraftMode
    }
  );
};
export {
  ServerToolbar as Toolbar
};
